{"version":3,"sources":["utils.js","gui.js","index.js"],"names":["createNode","n","v","p","document","createElementNS","setAttributeNS","replace","m","o","s","toLowerCase","downloadContent","filename","content","blob","Blob","event","MouseEvent","window","a","createElement","download","href","URL","createObjectURL","dispatchEvent","emptyElement","element","firstChild","removeChild","getParameterByName","name","url","location","regex","results","RegExp","exec","decodeURIComponent","getQueryStringObject","search","substring","split","map","str","key","value","decodeURI","reduce","prev","curr","Object","assign","getQueryStringObjectFromHash","hash","serializeObject","obj","keys","k","join","controls","id","type","min","max","step","setAttributes","attributes","entries","forEach","val","setAttribute","elements","control","label","text","createTextNode","input","innerHTML","appendChild","addEventListener","target","options","Array","from","querySelectorAll","memo","item","getElementById","params","SIZE","CENTER","selectedColorScheme","tick","mouse","x","y","COLORS","canvas","context","getContext","width","height","imageData","getImageData","buffer","ArrayBuffer","data","length","bufferViewInt8","Uint8ClampedArray","bufferViewInt32","Uint32Array","levelBuffer","levelBufferViewInt8","isInsideCircle","x1","y1","x2","y2","r","Math","sqrt","rain","w","offsetWidth","style","index","isRain","isStreet","round","isUmbrella","random","moveDroplet","set","putImageData","src","nextLevel","rand","horizontalMovement","floor","verticalMovement","nextColor","render","requestAnimationFrame","Noise","track","audioContext","AudioContext","webkitAudioContext","stopNoise","audioSource","stop","play","playNoise","buildTrack","createBufferSource","gainNode","createGain","connect","destination","createNoise","lastOut","bufferSize","sampleRate","noiseBuffer","createBuffer","output","getChannelData","i","white","setGain","volume","gain","setValueAtTime","currentTime","linearRampToValueAtTime","loop","start","handleMousemove","handleRainChange","handleColorChange","parseInt","console","log","handleSoundChange","wind","rainRangeElement","soundRangeElement","colorRangeElement"],"mappings":"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","file":"bitfire.e3789e2d.js","sourceRoot":"..","sourcesContent":["export const createNode = (n, v) => {\n    n = document.createElementNS(\"http://www.w3.org/2000/svg\", n);\n    for (var p in v)\n        n.setAttributeNS(null, p.replace(/[A-Z]/g, function (m, p, o, s) {\n            return \"-\" + m.toLowerCase();\n        }), v[p]);\n    return n\n};\n\nexport const downloadContent = (filename, content) => {\n    const blob = new Blob([content]);\n    const event = new MouseEvent('click', {\n        'view': window,\n        'bubbles': true,\n        'cancelable': true\n    });\n    const a = document.createElement(\"a\");\n    a.download = filename;\n    a.href = URL.createObjectURL(blob);\n    a.dispatchEvent(event);\n};\n\nexport const emptyElement = element => {\n    while (element.firstChild) {\n        element.removeChild(element.firstChild);\n    }\n    return element;\n};\n\nexport const getParameterByName = (name, url) => {\n    if (!url) {\n        url = window.location.href;\n    }\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return undefined;\n    if (!results[2]) return \"\";\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n\nexport const getQueryStringObject = () => {\n    return window.location.search.substring(1).split('&')\n        .map(str => {\n            let [key, value] = str.split('=');\n            return {[key]: decodeURI(value)};\n        })\n        .reduce((prev, curr) => Object.assign(prev, curr));\n};\n\nexport const getQueryStringObjectFromHash = () => {\n    return window.location.hash.substring(1).split('&')\n        .map(str => {\n            let [key, value] = str.split('=');\n            return {[key]: decodeURI(value)};\n        })\n        .reduce((prev, curr) => Object.assign(prev, curr));\n};\n\n\nexport const serializeObject = obj => `#${Object.keys(obj).map(k=>`${k}=${obj[k]}`).join('&')}`;\n","export const controls = [{\n    id: 'wind',\n    type: 'range',\n    min: 0,\n    max: 100,\n    step: 1,\n    value: 50\n}, {\n    id: 'rain',\n    type: 'range',\n    min: 0,\n    max: 100,\n    step: 1,\n    value: 50\n}, {\n    id: 'sound',\n    type: 'range',\n    min: 0,\n    max: 1,\n    step: 1,\n    value: 0\n}, {\n    id: 'color',\n    type: 'range',\n    min: 0,\n    max: 2,\n    step: 1,\n    value: 0\n}];","import {\n    createNode,\n    downloadContent,\n    emptyElement,\n    getQueryStringObjectFromHash,\n    serializeObject\n} from './utils.js';\n\nimport {controls} from \"./gui.js\";\n\n\nconst setAttributes = (element, attributes) => Object.entries(attributes)\n    .forEach(([key, val]) =>\n        element.setAttribute(key, val));\n\nconst elements = controls.map(control => {\n    const label = document.createElement('label');\n    const text = document.createTextNode(control.id);\n    const input = document.createElement('input');\n\n    setAttributes(input, control);\n\n    const val = document.createElement('span');\n    val.innerHTML = ` (${control.value})`;\n\n    label.appendChild(text);\n    label.appendChild(val);\n    label.appendChild(input);\n\n    input.addEventListener('change', event => {\n        val.innerHTML = ` (${event.target.value})`;\n        const options = Array.from(document.querySelectorAll('input'))\n            .map(({id, value}) => ({[id]: value}))\n            .reduce((memo, item) => Object.assign(memo, item), {});\n        location.hash = serializeObject(options);\n    });\n\n    return label;\n});\n\nconst target = document.getElementById('controls');\nelements.forEach(element => target.appendChild(element));\n\n// const search = window.location.search;\nconst params = getQueryStringObjectFromHash();\nObject.keys(params).forEach(key => {\n    const input = document.getElementById(key);\n    if (input) {\n        input.value = params[key];\n    }\n});\n\n/*\n\n\n\n\n\nconst svg = createNode(\"svg\");\ndocument.getElementById('js-paper').appendChild(svg);\n\nwindow.addEventListener(\"hashchange\", event => {\n  const options = getQueryStringObjectFromHash();\n  render({svg, ...options});\n  Object.keys(options).forEach(key => {\n    const input = document.getElementById(key);\n    if (input) {\n      input.value = options[key];\n    }\n  });\n});\n\nconst options = Array.from(document.querySelectorAll('input'))\n    .map(({id, value}) => ({[id]: value}))\n    .reduce((memo, item) => Object.assign(memo, item), {});\nrender({svg, ...options});\n\n\nconst downloadButton = document.createElement('button');\ndownloadButton.innerText = \"Download SVG\";\ndownloadButton.addEventListener('click', event => {\n  const options = Array.from(document.querySelectorAll('input'))\n      .map(({id, value}) => ({[id]: value}))\n      .reduce((memo, item) => Object.assign(memo, item), {});\n  render({svg, ...options});\n  const values = Object.values(options).join('-');\n  downloadContent(`mandala-${values}.svg`, svg.outerHTML);\n});\ntarget.appendChild(downloadButton);\n\nfunction render(options) {\n\n  const {svg} = options;\n\n  const size = 540;\n  const table = parseInt(options.table);\n  const modulo = parseInt(options.modulo);\n  const rotation = parseInt(options.rotation);\n  const start = parseInt((options.start || 0) / 100 * modulo);\n  const end = parseInt((options.end || 100) / 100 * modulo);\n\n  const width = size;\n  const height = size;\n\n  emptyElement(svg);\n  svg.setAttribute(\"viewBox\", `0, 0, ${size}, ${size}`);\n  svg.setAttribute('width', width);\n  svg.setAttribute('height', height);\n\n\n  // Create an array of circle coordinates.\n  const circle = new Array(modulo).fill(0).map((_, index) => index * (Math.PI * 2) / modulo).map(angle => {\n    const x = width / 2 * Math.cos(angle + (Math.PI / 180 * rotation)) + width / 2;\n    const y = height / 2 * Math.sin(angle + (Math.PI / 180 * rotation)) + height / 2;\n    return {x, y};\n  });\n\n  // Create the lines.\n  const lines = new Array(end - start).fill(0).map((_, index) => start + index).map(i => {\n    const p1 = parseInt(i % modulo, 10);\n    const p2 = parseInt((table * i) % modulo, 10);\n\n    const start = circle[p1];\n    const end = circle[p2];\n\n    const {x: x1, y: y1} = start;\n    const {x: x2, y: y2} = end;\n\n    if (options.center === \"1\") {\n      const w = Math.abs(x1 - x2);\n      const h = Math.abs(y1 - y2);\n\n      const x = x1 < x2 ? x1 : x2;\n      const y = y1 < y2 ? y1 : y2;\n      const diffx = size / 2 - x;\n      const diffy = size / 2 - y;\n\n      const res = {\n        x1: x1 + diffx - w / 2,\n        x2: x2 + diffx - w / 2,\n        y1: y1 + diffy - h / 2,\n        y2: y2 + diffy - h / 2\n      };\n\n      return res;\n    }\n\n    return {x1, y1, x2, y2};\n  });\n\n  const filteredLines = lines.filter((_, index) => {\n    return index % parseInt(options.keepEveryNLines) === parseInt(options.keepEveryNLinesShift);\n  });\n\n  const filteredLines2 = parseInt(options.minLength) === 0 ? filteredLines : filteredLines.filter(line => {\n    const a = line.x1 - line.x2;\n    const b = line.y1 - line.y2;\n    const length = Math.sqrt(a * a + b * b);\n    return length > options.minLength\n  });\n\n\n  // Append lines to svg element.\n  filteredLines2.forEach(coordinates => {\n    const line = createNode(\"line\", {\n      strokeWidth: 0.4,\n      stroke: \"#FFFFFF\", ...coordinates\n    });\n    svg.appendChild(line);\n  });\n\n}\n\n* */\n\nconst SIZE = 256;\nconst CENTER = SIZE / 2;\n\nlet selectedColorScheme = 0;\nlet tick = 0;\nlet mouse = {\n    x: 0.5,\n    y: 0.4\n};\n\n// A gray-scale height-map.\nconst COLORS = [[\n    [255, 255, 255],\n    [240, 240, 240],\n    [217, 217, 217],\n    [189, 189, 189],\n    [150, 150, 150],\n    [115, 115, 115],\n    [82, 82, 82],\n    [37, 37, 37],\n    [0, 0, 0]\n], [\n    [255, 255, 204],\n    [255, 237, 160],\n    [254, 217, 118],\n    [254, 178, 76],\n    [253, 141, 60],\n    [252, 78, 42],\n    [227, 26, 28],\n    [189, 0, 38],\n    [128, 0, 38]\n], [\n    [255, 247, 251],\n    [236, 231, 242],\n    [208, 209, 230],\n    [166, 189, 219],\n    [116, 169, 207],\n    [54, 144, 192],\n    [5, 112, 176],\n    [4, 90, 141],\n    [2, 56, 88]\n]];\n\n\n// Setup the canvas.\nconst canvas = document.getElementById('canvas');\nconst context = canvas.getContext('2d');\n\ncanvas.width = SIZE;\ncanvas.height = SIZE;\n\nconst imageData = context.getImageData(0, 0, SIZE, SIZE);\n\n// One buffer to hold the color data for each pixel.\nconst buffer = new ArrayBuffer(imageData.data.length);\nconst bufferViewInt8 = new Uint8ClampedArray(buffer);\nconst bufferViewInt32 = new Uint32Array(buffer);\n\n// One buffer to hold the height map level for each pixel.\nconst levelBuffer = new ArrayBuffer(imageData.data.length);\nconst levelBufferViewInt8 = new Uint8ClampedArray(levelBuffer);\n\n// Check if a coordinate is inside a circle with center x1, y1 and radius r.\nfunction isInsideCircle(x1, y1, x2, y2, r) {\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) < r\n}\n\nfunction rain(tick) {\n\n    const w = canvas.offsetWidth;\n    canvas.style.height = w;\n\n    for (let y = 0; y < SIZE; y += (tick % 2) + 1) {\n        for (let x = 0; x < SIZE; x += (tick % 2) + 1) {\n\n            const index = (y) * SIZE + x;\n\n            // Generate rain in the top of the image.\n            const isRain = y < 2;\n\n            // Generate a flooded street in the bottom of the image.\n            const isStreet = y > Math.round(CENTER * 1.53) && y < Math.round(CENTER * 1.57);\n\n            // Mask out the silhouette of an umbrella in the middle of the image.\n            const isUmbrella = Math.random() > 0.8\n                && isInsideCircle(CENTER, CENTER, x, y, 32)\n                && !isInsideCircle(CENTER, CENTER - 10, x - 1, y, 40);\n\n            if (isRain || isStreet || isUmbrella) {\n                levelBufferViewInt8[index] = 0;\n            }\n\n            // Bring it to life.\n            moveDroplet(index);\n        }\n    }\n\n    // Update the canvas with the new pixel values.\n    imageData.data.set(bufferViewInt8);\n    context.putImageData(imageData, 0, 0);\n}\n\nfunction moveDroplet(src) {\n\n    const nextLevel = levelBufferViewInt8[src] + Math.round(Math.random() * 1.3);\n\n    // Generate a 0, 1 or 2.\n    const rand = Math.round(Math.random() * 2.0);\n\n    // Add horizontal movement to create a wind effect.\n    const horizontalMovement = Math.random() > 0.8\n        ? src - rand + Math.floor((mouse.x * 8 - 3))\n        : src;\n\n    // Every 1 in 5 the rain will move up-wards and create the\n    // street splash effect.\n    const verticalMovement = Math.floor(Math.random() * (4 + Math.floor((mouse.y * 4)))) * (Math.random() > 0.2\n        ? 1\n        : -1);\n\n    levelBufferViewInt8[horizontalMovement + (SIZE * verticalMovement)] = nextLevel - (rand & 1);\n\n    const nextColor = COLORS[selectedColorScheme][nextLevel] || 11;\n\n    // Set the new pixel value.\n    bufferViewInt32[src - SIZE] =\n        (255 << 24) |           // Alpha\n        (nextColor[2] << 16) |  // Blue\n        (nextColor[1] << 8) |   // Green\n        nextColor[0];           // Red\n}\n\nfunction render() {\n    rain(tick++);\n\n    // Go again!\n    // setTimeout(function () {\n    requestAnimationFrame(() => render());\n    // }, 1000);\n}\n\n// Go!\nrender();\n\n\nconst Noise = (function () {\n\n    const track = {};\n    const audioContext = new (window.AudioContext || window.webkitAudioContext);\n\n    function createNoise(track) {\n        var lastOut = 0.0;\n        const bufferSize = 2 * audioContext.sampleRate;\n        const noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);\n        const output = noiseBuffer.getChannelData(0);\n\n        for (let i = 0; i < bufferSize; i++) {\n            var white = Math.random() * 2 - 1;\n            output[i] = (lastOut + (0.02 * white)) / 1.02;\n            lastOut = output[i];\n            output[i] *= 3.5;\n        }\n\n        track.audioSource.buffer = noiseBuffer;\n    }\n\n    function stopNoise() {\n        if (track.audioSource) {\n            track.audioSource.stop();\n        }\n    }\n\n\n    function buildTrack(track) {\n        track.audioSource = audioContext.createBufferSource();\n        track.gainNode = audioContext.createGain();\n        track.audioSource.connect(track.gainNode);\n        track.gainNode.connect(audioContext.destination);\n    }\n\n    function setGain(track) {\n        track.volume = 0.1;\n        track.gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n        track.gainNode.gain.linearRampToValueAtTime(track.volume / 4, audioContext.currentTime / 2);\n        track.gainNode.gain.linearRampToValueAtTime(track.volume, audioContext.currentTime);\n\n    }\n\n    function playNoise() {\n        stopNoise(track);\n        buildTrack(track);\n        createNoise(track);\n        setGain(track);\n        track.audioSource.loop = true;\n        track.audioSource.start();\n    }\n\n    // Expose functions:\n    return {\n        play: playNoise,\n        stop: stopNoise\n    }\n\n}());\n\n\nlet handleMousemove = (event) => {\n    const {target} = event;\n    mouse.x = target.value / 100;\n};\n\nconst handleRainChange = (event) => {\n    const {target} = event;\n    mouse.y = target.value / 100;\n};\n\nconst handleColorChange = (event) => {\n    const {target} = event;\n    selectedColorScheme = parseInt(target.value);\n    console.log(selectedColorScheme);\n};\n\nconst handleSoundChange = (event) => {\n    const {target} = event;\n    if (target.value === \"1\") {\n        Noise.play();\n    } else {\n        Noise.stop();\n    }\n};\n\n\nconst wind = document.getElementById('wind');\nwind.addEventListener('input', handleMousemove);\n\nconst rainRangeElement = document.getElementById('rain');\nrainRangeElement.addEventListener('input', handleRainChange);\n\n\nconst soundRangeElement = document.getElementById('sound');\nsoundRangeElement.addEventListener('input', handleSoundChange);\n\nconst colorRangeElement = document.getElementById('color');\ncolorRangeElement.addEventListener('input', handleColorChange);\n"]}